"""Программа с классом Sphere для представления сферы в
трёхмерном пространстве.
Реализовать методы:
o Конструктор, принимающий 4 числа: радиус и
координаты центра сферы x, y, z. Если конструктор
вызывается без аргументов, создать объект сферы с
единичным радиусом и центром в начале координат.
Если конструктор вызывается только с радиусом,
создать объект с соответствующим радиусом и центром
в начале координат
o Метод get_volume(), возвращающий число – объем шара,
ограниченного текущей сферой
o Метод get_square(), возвращающий число – площадь
внешней поверхности сферы
TeachMeSkills.by
o Метод get_radius(), возвращающий число – радиус
текущей сферы
o Метод get_center(), возвращающий кортеж с
координатами центра сферы
o Метод set_radius(radius), который принимает новое
значение радиуса, меняет радиус текущей сферы и
ничего не возвращает
o Метод set_center(x, y, z), который принимает новые
значения для координат центра радиуса, меняет
координаты текущей сферы и ничего не возвращает
o Метод is_point_inside(x, y, z), который принимает
координаты некой точки в трёхмерном пространстве и
возвращает True или False в зависимости от того,
находится ли точка внутри сферы"""


class Sphere:   # Создаем класс Sphere

    def __init__(self, radius, new_x=0, new_y=0, new_z=0):  # Инициализируем, присваиваем атрибутам переданные значения
        self.radius = radius
        self.x = new_x
        self.y = new_y
        self.z = new_z

    def get_volume(self):   # Метод расчета объема сферы
        return (4 * 3.14 * self.radius ** 3) / 3

    def get_square(self):  # Метод расчета площади поверхности сферы
        return 4 * 3.14 * self.radius ** 2

    def get_radius(self):  # Метод получения значения радиуса сферы
        return self.radius

    def get_center(self):  # Метод получения значения центра сферы
        a = (self.x, self.y, self.z)
        return a

    def set_radius(self, radius):  # Метод изменения радиуса
        self.radius = radius

    def set_center(self, new_x=0, new_y=0, new_z=0):  # Метод изменения координат центра
        self.x = new_x
        self.y = new_y
        self.z = new_z

    def is_point_inside(self, new_x=0, new_y=0, new_z=0):  # Метод проверки попадания точки внутрь сферы
        if (self.x - new_x) ** 2 + (self.y - new_y) ** 2 + (self.z - new_z) ** 2 < self.radius ** 2:
            print(f'Точка с координатами{new_x, new_y, new_z} находится внутри сферы с '
                  f'координатами {self.x, self.y, self.z} радиуса {self.radius}')


new_shpere = Sphere(30, 5, 10, 13)  # Создание элемента класса
print(f'Объем сферы будет {new_shpere.get_volume()}')    # вызов методов
print(f'Площадь поверхности сферы {new_shpere.get_square()}')
print(f'Текущий радиус сферы {new_shpere.get_radius()}')
print(f'Текущие координаты центра сферы {new_shpere.get_center()}')

new_shpere.set_radius(45)   # вызов метода на изменение радиуса

print(f'Текущий радиус сферы {new_shpere.get_radius()}')

new_shpere.set_center(5, 30, 40)  # вызов метода на изменение центра

print(f'Текущие координаты центра сферы {new_shpere.get_center()}')

new_shpere.is_point_inside(7, 12, 25)  # вызов метода проверки попадания

